program Project1;
 
type
  (*Типы для описания списка.*)
 
  (*Тип данных - определяет данные, которые будет содержать каждый элемент списка.*)
  TData = Integer;
  (*Тип, описывающий элемент списка.*)
  TPElem = ^TElem;
  TElem = record
    Data : TData;
    PNext : TPElem;
    PPrev : TPElem;
  end;
  (*Тип, описывающий список.*)
  TList = record
    PFirst : TPElem;
    PLast : TPElem;
  end;
 
(*Процедуры для работы со списком.*)
 
(*Удаление всего списка из памяти и инициализация.*)
procedure ListFree(var aList : TList);
var
  PNext, PDel : TPElem;
begin
  if aList.PFirst = nil then Exit;
 
  PNext := aList.PFirst;
  while PNext <> nil do begin
    PDel := PNext;
    PNext := PNext^.PNext;
    Dispose(PDel);
  end;
 
  aList.PFirst := nil;
  aList.PLast := nil;
end;
 
(*Добавление элемента в начало списка.*)
procedure AddF(var aList : TList; const aPElem : TPElem);
begin
  if aPElem = nil then Exit;
 
  aPElem^.PNext := nil;
  aPElem^.PPrev := nil;
  if aList.PFirst = nil then begin
    aList.PFirst := aPElem;
    aList.PLast := aPElem;
  end else begin
    aPElem^.PNext := aList.PFirst;
    aList.PFirst^.PPrev := aPElem;
    aList.PFirst := aPElem;
  end;
end;
 
(*Добавление элемента в конец списка.*)
procedure AddL(var aList : TList; const aPElem : TPElem);
begin
  if aPElem = nil then Exit;
 
  aPElem^.PNext := nil;
  aPElem^.PPrev := nil;
  if aList.PFirst = nil then begin
    aList.PFirst := aPElem;
    aList.PLast := aPElem;
  end else begin
    aList.PLast^.PNext := aPElem;
    aPElem^.PPrev := aList.PLast;
    aList.PLast := aPElem;
  end;
end;
 
(*Вставка перед элементом.*)
procedure InsB(var aList : TList; const aPBase, aPElem : TPElem);
begin
  if aPElem = nil then Exit;
 
  if (aList.PFirst = nil) or (aPBase = nil) or (aPBase = aList.PFirst) then begin
    AddF(aList, aPElem);
  end else begin
    aPElem^.PPrev := aPBase^.PPrev;
    aPElem^.PNext := aPBase;
    aPBase^.PPrev := aPElem;
    aPElem^.PPrev^.PNext := aPElem;
  end;
end;
 
(*Вставка после элемента.*)
procedure InsA(var aList : TList; const aPBase, aPElem : TPElem);
begin
  if aPElem = nil then Exit;
 
  if (aList.PLast = nil) or (aPBase = nil) or (aPBase = aList.PLast) then begin
    AddL(aList, aPElem);
  end else begin
    aPElem^.PPrev := aPBase;
    aPElem^.PNext := aPBase^.PNext;
    aPBase^.PNext := aPElem;
    aPElem^.PNext^.PPrev := aPElem;
  end;
end;
 
(*Возвращение указателя на элемент по его номеру в списке.
Если элемента с заданным номером не существует, то возвращается nil.*)
function GetByNum(const aList : TList; const aI : Longword) : TPElem;
var
  i : Longword;
  PNext : TPElem;
  Res : TPElem;
begin
  Res := nil;
 
  i := 1;
  PNext := aList.PFirst;
  while (i <= aI) and (PNext <> nil) do begin
    if i = aI then begin
      Res := PNext;
      Break;
    end;
    Inc(i);
    PNext := PNext^.PNext;
  end;
 
  GetByNum := Res;
end;
 
(*Поиск элемента в списке по данным.
Если элемент не найден, то возвращается nil.*)
function FindElem(const aList : TList; const aData : TData) : TPElem;
var
  PNext, Res : TPElem;
begin
  Res := nil;
 
  PNext := aList.PFirst;
  while PNext <> nil do begin
    if PNext^.Data = aData then begin
      Res := PNext;
      Break;
    end;
    PNext := PNext^.PNext;
  end;
 
  FindElem := Res;
end;
 
(*Удаление элемента по указателю на него.*)
function DelByRef(var aList : TList; var aPElem : TPElem) : Boolean;
begin
  DelByRef := False;
  if aPElem = nil then Exit;
 
  if aPElem = aList.PFirst then begin
    aList.PFirst := aPElem^.PNext;
    if aList.PFirst = nil then
      aList.PLast := nil
    else
      aList.PFirst^.PPrev := nil
    ;
  end else if aPElem = aList.PLast then begin
    aList.PLast := aPElem^.PPrev;
    if aList.PLast = nil then
      aList.PFirst := nil
    else
      aList.PLast^.PNext := nil
    ;
  end else begin
    aPElem^.PPrev^.PNext := aPElem^.PNext;
    aPElem^.PNext^.PPrev := aPElem^.PPrev;
  end;
 
  Dispose(aPElem);
  aPElem := nil;
  DelByRef := True;
end;
 
(*Удаление элемента по его номеру.*)
function DelByNum(var aList : TList; const aI : Longword) : Boolean;
var
  PElem : TPElem;
begin
  PElem := GetByNum(aList, aI);
  DelByNum := DelByRef(aList, PElem);
end;
 
var
  List : TList;
  PElem, PElemB : TPElem;
  i : Integer;
begin
  //Инициализация списка.
  List.PFirst := nil;
  List.PLast := nil;
 
  //Создаём несколько элементов и помещаем их в список
  //через процедуру добавления в конец.
  for i := 1 to 3 do begin
    New(PElem);
    PElem^.Data := i;
    AddL(List, PElem);
  end;
 
  //Показываем весь список.
  Writeln('Исходный список:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Создаём несколько элементов и помещаем их в список
  //через процедуру добавления в начало списка.
  for i := 1 to 3 do begin
    New(PElem);
    PElem^.Data := i * -10;
    AddF(List, PElem);
  end;
 
  //Показываем весь список.
  Writeln('Список после добавления 3-ёх элементов в начало:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Создаём несколько элементов и помещаем их в список
  //через процедуру добавления в конец списка.
  for i := 1 to 3 do begin
    New(PElem);
    PElem^.Data := i * 10;
    AddL(List, PElem);
  end;
 
  //Показываем весь список.
  Writeln('Список после добавления 3-ёх элементов в конец:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Создаём несколько элементов и помещаем их в список
  //после 6-го элемента.
 
  //Получаем ссылку на 6-ой элемент.
  PElemB := GetByNum(List, 6);
 
  //Добавляем 3 элемента после 6-го элемента.
  if PElemB <> nil then begin
    for i := 1 to 3 do begin
      New(PElem);
      PElem^.Data := i * 100;
      InsA(List, PElemB, PElem);
    end;
  end;
 
  //Показываем весь список.
  Writeln('Список после добавления 3-ёх элементов после 6-го элемента:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Добавляем 3 элемента перед 6-ым элементом.
  if PElemB <> nil then begin
    for i := 1 to 3 do begin
      New(PElem);
      PElem^.Data := i * -100;
      InsB(List, PElemB, PElem);
    end;
  end;
 
  //Показываем весь список.
  Writeln('Список после добавления 3-ёх элементов перед 6-ым элементом:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Удаляем 8 и 3 элементы.
  DelByNum(List, 8);
  DelByNum(List, 3);
 
  //Показываем весь список.
  Writeln('Список после удаления элементов с номерами 8 и 3:');
  PElem := List.PFirst;
  i := 0;
  while PElem <> nil do begin
    Inc(i);
    if i > 1 then Write(', ');
    Write(PElem^.Data);
    PElem := PElem^.PNext;
  end;
  Writeln;
 
  //Удаление списка из памяти.
  ListFree(List);
  Writeln('Список удалён из памяти. Программа завершена.');
 
  Readln;
end.
